import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import axios from 'axios';
import FlashMessage, { showMessage } from 'react-native-flash-message';
import { useRoute } from '@react-navigation/native';
import { api_url } from '@env';

export default function EMSUser({ navigation }) {
  const route = useRoute();
  const {fullName} = route.params;
  
  const [selectedIssue, setSelectedIssue] = useState(null);
  const [message, setMessage] = useState('');
  const [timer, setTimer] = useState(120); // 5 minutes in seconds
  const [isTimerActive, setIsTimerActive] = useState(false);
  //const [userName, setUserName] = useState('User'); // Default user name

  // Define messages for each issue
  const issueMessages = {
    'Vehicle Breakdown': `Urgent: Vehicle Breakdown alert generated by ${fullName}. ${fullName} needs assistance.`,
    'Accident/Fire': `Urgent: Accident/Fire alert generated by ${fullName}. ${fullName} needs assistance.`,
    'Medical': `Urgent: Medical emergency alert generated by ${fullName}. ${fullName} needs assistance.`,
  };

  // Handle issue button press
  const handleIssuePress = (issue) => {
    setSelectedIssue(issue);
    setMessage(issueMessages[issue]);
    handleSendMessage(issue, issueMessages[issue]);
    startTimer();
  };

  // Handle the cancel action
  const handleCancel = () => {
    setSelectedIssue(null);
    setMessage('');
    setTimer(120);
    setIsTimerActive(false);
    showMessage({
      message: 'EMS Request Cancelled',
      description: 'EMS request has been cancelled.',
      type: 'danger',
    });
    handleSendMessage('Cancellation', 'EMS request cancelled');
  };

  // Send message to all admin users
  const handleSendMessage = async (issue, message) => {
    if (!issue) {
      showMessage({
        message: 'Error',
        description: 'Please select an issue first.',
        type: 'danger',
      });
      return;
    }

    if (message.trim() === '') {
      showMessage({
        message: 'Error',
        description: 'Message cannot be empty.',
        type: 'danger',
      });
      return;
    }

    try {
      console.log(message);
      await axios.post(`${api_url}/sendMessageToAdmins`, {
        message,
        issue,
        fullName
      });
      if (issue === 'Cancellation') {
        showMessage({
          message: 'EMS Request Cancelled',
        //   description: 'EMS request has been cancelled.',
          type: 'danger',
        });
      } else {
        showMessage({
          message: 'EMS Request Generated',
        //   description: 'Message sent to all admins.',
          type: 'success',
        });
      }
    } catch (error) {
      console.error('Error sending message:', error);
      showMessage({
        message: 'Error',
        description: 'Failed to send message.',
        type: 'danger',
      });
    }
  };

  // Start a countdown timer
  const startTimer = () => {
    setIsTimerActive(true);
    const interval = setInterval(() => {
      setTimer(prevTimer => {
        if (prevTimer <= 1) {
          clearInterval(interval);
          setIsTimerActive(false);
          return 0;
        }
        return prevTimer - 1;
      });
    }, 1000);
  };

  // Convert seconds to minutes and seconds format
  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
  };

  return (
    <View style={styles.container}>
      <View style={styles.issueSelectionContainer}>
        <Text style={styles.issueSelectionText}>Select an issue to send a message:</Text>
        
        <TouchableOpacity
          style={styles.issueButton}
          onPress={() => handleIssuePress('Vehicle Breakdown')}
        >
          <Text style={styles.buttonText}>Vehicle Breakdown</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.issueButton}
          onPress={() => handleIssuePress('Accident/Fire')}
        >
          <Text style={styles.buttonText}>Accident/Fire</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.issueButton}
          onPress={() => handleIssuePress('Medical')}
        >
          <Text style={styles.buttonText}>Medical</Text>
        </TouchableOpacity>
      </View>

      {selectedIssue && (
        <View style={styles.cancelContainer}>
          <Text style={styles.timerText}>Cancel within: {formatTime(timer)}</Text>
          <TouchableOpacity
            style={styles.cancelButton}
            onPress={handleCancel}
          >
            <Text style={styles.cancelButtonText}>Cancel Issue</Text>
          </TouchableOpacity>
        </View>
      )}

      <FlashMessage position="top" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#add8e6',
    paddingHorizontal: 20,
    paddingTop: 50,
  },
  issueSelectionContainer: {
    marginTop: 20,
  },
  issueSelectionText: {
    fontSize: 16,
    marginBottom: 10,
  },
  issueButton: {
    backgroundColor: '#126180',
    padding: 15,
    borderRadius: 5,
    marginBottom: 10,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
  },
  cancelContainer: {
    marginTop: 20,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: '#c23b22',
    padding: 15,
    borderRadius: 5,
    alignItems: 'center',
  },
  cancelButtonText: {
    color: '#fff',
    fontSize: 16,
  },
  timerText: {
    fontSize: 16,
    marginBottom: 10,
  },
});
